{"version":3,"file":"static/js/115.b8c281ca.chunk.js","mappings":"iMAIMA,EAAgBC,EAAAA,GAAAA,GAAH,yGAObC,EAAYD,EAAAA,GAAAA,GAAH,sFAMTE,EAAaF,EAAAA,GAAAA,IAAH,wGAOVG,EAAmBH,EAAAA,GAAAA,IAAH,wtBAShBI,EAAYJ,EAAAA,GAAAA,EAAH,mEAKTK,EAAgBL,EAAAA,GAAAA,EAAH,4CAwCnB,UApCa,SAAC,GAAc,IAAZM,EAAW,EAAXA,KACd,OACE,SAACP,EAAD,UACGO,EAAKC,KAAI,SAAAC,GAAK,OACb,SAACP,EAAD,WACE,2BACGO,EAAMC,cACL,SAACP,EAAD,CACEQ,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAKH,EAAMI,QAGb,SAACT,EAAD,KAEF,UAACC,EAAD,WAAW,UAAQI,EAAMI,SACzB,UAACP,EAAD,WAAe,cACDG,EAAMK,UAAUC,MAAM,KAAK,UAZ7BN,EAAMO,GADT,KAoBpB,C","sources":["pages/Cast/Cast.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst CastContainer = styled.ul`\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst ActorCard = styled.li`\n  width: calc(9%);\n  margin-bottom: 20px;\n  padding: 10px;\n`;\n\nconst ActorImage = styled.img`\n  width: 150px;\n  height: 225px;\n  object-fit: cover;\n  border-radius: 5px;\n`;\n\nconst PlaceholderImage = styled.div`\n  width: 150px;\n  height: 225px;\n  margin-bottom: 10px;\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3c?xml version='1.0' encoding='UTF-8' standalone='no'?%3e%3csvg xmlns='http://www.w3.org/2000/svg' width='225' height='150' version='1.0'%3e%3cpath fill='%23d4d4d4' d='M0 0v150h225V0H0z'/%3e%3cpath fill='%23fff' d='m64.055077 38.894466 36.105543 36.105536-36.105543 36.105538 12.320373 12.32038 36.10554-36.105547 36.12454 36.124547 12.33939-12.33938-36.12454-36.124551 36.10554-36.105537-12.32039-12.320372-36.10552 36.105536L76.394463 26.55508 64.055077 38.894466z' overflow='visible' style='marker:none'/%3e%3c/svg%3e\");\n  background-size: cover;\n  background-position: center;\n`;\n\nconst ActorName = styled.p`\n  margin-top: 10px;\n  font-weight: bold;\n`;\n\nconst CharacterName = styled.p`\n  margin-top: 5px;\n`;\n\nconst Cast = ({ cast }) => {\n  return (\n    <CastContainer>\n      {cast.map(actor => (\n        <ActorCard key={actor.id}>\n          <div>\n            {actor.profile_path ? (\n              <ActorImage\n                src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                alt={actor.name}\n              />\n            ) : (\n              <PlaceholderImage />\n            )}\n            <ActorName>Actor: {actor.name}</ActorName>\n            <CharacterName>\n              Character: {actor.character.split('/')[0]}\n            </CharacterName>\n          </div>\n        </ActorCard>\n      ))}\n    </CastContainer>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Cast;\n"],"names":["CastContainer","styled","ActorCard","ActorImage","PlaceholderImage","ActorName","CharacterName","cast","map","actor","profile_path","src","alt","name","character","split","id"],"sourceRoot":""}