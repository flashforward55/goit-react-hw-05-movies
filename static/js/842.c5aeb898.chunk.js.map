{"version":3,"file":"static/js/842.c5aeb898.chunk.js","mappings":"wPAMMA,EAAYC,EAAAA,GAAAA,IAAH,iEAKTC,EAAQD,EAAAA,GAAAA,GAAH,oEAKLE,EAAYF,EAAAA,GAAAA,GAAH,yGAOTG,EAAYH,EAAAA,GAAAA,GAAH,mSAkBTI,GAAYJ,EAAAA,EAAAA,IAAOK,EAAAA,GAAPL,CAAH,qFAMTM,EAAaN,EAAAA,GAAAA,IAAH,iFAMVO,EAAaP,EAAAA,GAAAA,EAAH,0DA+ChB,UA1Ca,WACX,OAA4BQ,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAWA,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,qGACWC,EAAAA,EAAAA,MADX,OACZC,EADY,OAElBJ,EAAUI,GAFQ,2CAAH,qDAKjBF,GACD,GAAE,KAGD,UAACb,EAAD,YACE,SAACE,EAAD,UAAO,qBACP,SAACC,EAAD,UACGO,EAAOM,KAAI,SAAAC,GAAK,OACf,SAACb,EAAD,WACE,UAACC,EAAD,CAAWa,GAAE,kBAAaD,EAAME,IAAhC,WACE,SAACZ,EAAD,CACEa,IAAG,0CAAqCH,EAAMI,aAC9CC,IAAKL,EAAMM,SAEb,SAACf,EAAD,UAAaS,EAAMM,YANPN,EAAME,GADP,QAcxB,C,8LCtFDK,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAEMC,EAAe,IAAIC,gBAAgB,CACvCC,OAAQ,MACRC,QAJU,mCAKVC,SAAU,QACVC,eAAe,EACfC,QAAS,CACPC,OAAQ,sBAIClB,EAAmB,mCAAG,0FACpB,sBADoB,kBAIRU,EAAAA,EAAAA,IAAA,UAHZ,sBAGY,YAAqBC,IAJb,cAIzBQ,EAJyB,yBAKxBA,EAASC,KAAKC,SALU,sCAO/BC,QAAQC,IAAI,kCAAZ,MAP+B,8DAAH,qDAYnBC,EAAY,mCAAG,WAAOC,GAAP,6EACb,gBADa,kBAIDf,EAAAA,EAAAA,IAAA,UAHZ,gBAGY,YAAqBC,EAArB,kBAA2Cc,IAJ1C,cAIlBN,EAJkB,yBAKjBA,EAASC,KAAKC,SALG,sCAOxBC,QAAQC,IAAI,0BAAZ,MAPwB,8DAAH,sDAaZG,EAAiB,mCAAG,WAAMC,GAAN,gFACzBC,EADyB,iBACRD,GADQ,kBAGNjB,EAAAA,EAAAA,IAAA,UAAakB,EAAb,YAAqBjB,IAHf,cAGvBQ,EAHuB,yBAItBA,EAASC,MAJa,sCAM7BE,QAAQC,IAAI,gCAAZ,MAN6B,8DAAH,sDAWjBM,EAAS,mCAAG,WAAMF,GAAN,gFACjBC,EADiB,iBACAD,EADA,8BAGEjB,EAAAA,EAAAA,IAAA,UAAakB,EAAb,YAAqBjB,IAHvB,cAGfQ,EAHe,yBAIdA,EAASC,KAAKU,MAJA,sCAMrBR,QAAQC,IAAI,uBAAZ,MANqB,8DAAH,sDAWTQ,EAAY,mCAAG,WAAMJ,GAAN,gFACpBC,EADoB,iBACHD,EADG,8BAGDjB,EAAAA,EAAAA,IAAA,UAAakB,EAAb,YAAqBjB,IAHpB,cAGlBQ,EAHkB,yBAIjBA,EAASC,KAAKC,SAJG,sCAMxBC,QAAQC,IAAI,0BAAZ,MANwB,8DAAH,qD","sources":["components/Home/Home.jsx","services/api.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { fetchTrendingMovies } from 'services/api';\n\nconst Container = styled.div`\n  padding: 20px;\n  text-align: center;\n`;\n\nconst Title = styled.h1`\n  font-size: 24px;\n  margin-bottom: 20px;\n`;\n\nconst MovieList = styled.ul`\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst MovieItem = styled.li`\n  width: calc(100% / 6);\n  margin-bottom: 20px;\n  padding: 10px;\n\n  @media (max-width: 1200px) {\n    width: calc(100% / 4);\n  }\n\n  @media (max-width: 800px) {\n    width: calc(100% / 3);\n  }\n\n  @media (max-width: 600px) {\n    width: calc(100% / 2);\n  }\n`;\n\nconst MovieLink = styled(Link)`\n  display: block;\n  text-decoration: none;\n  color: #333;\n`;\n\nconst MovieImage = styled.img`\n  width: 100%;\n  height: auto;\n  margin-bottom: 10px;\n`;\n\nconst MovieTitle = styled.p`\n  font-size: 16px;\n  margin: 0;\n`;\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const trendingMovies = await fetchTrendingMovies();\n      setMovies(trendingMovies);\n    };\n\n    fetchMovies();\n  }, []);\n\n  return (\n    <Container>\n      <Title>Trending Movies</Title>\n      <MovieList>\n        {movies.map(movie => (\n          <MovieItem key={movie.id}>\n            <MovieLink to={`/movies/${movie.id}`}>\n              <MovieImage\n                src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                alt={movie.title}\n              />\n              <MovieTitle>{movie.title}</MovieTitle>\n            </MovieLink>\n          </MovieItem>\n        ))}\n      </MovieList>\n    </Container>\n  );\n};\n\nHome.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '6d44761072bd3455ede44a6813ca8a9a';\n\nconst searchParams = new URLSearchParams({\n  method: 'GET',\n  api_key: KEY,\n  language: 'en-US',\n  include_adult: false,\n  headers: {\n    accept: 'application/json',\n  },\n});\n\nexport const fetchTrendingMovies = async () => {\n  const path = '/trending/movie/day';\n\n  try {\n    const response = await axios.get(`${path}?${searchParams}`);\n    return response.data.results;\n  } catch (error) {\n    console.log('Error fetching trending movies:', error);\n    throw error;\n  }\n};\n\nexport const searchMovies = async (query) => {\n  const path = '/search/movie';\n\n  try {\n    const response = await axios.get(`${path}?${searchParams}&query=${query}`);\n    return response.data.results;\n  } catch (error) {\n    console.log('Error searching movies:', error);\n    throw error;\n  }\n};\n\n\nexport const fetchMovieDetails = async movieId => {\n  const path = `/movie/${movieId}`;\n  try {\n    const response = await axios.get(`${path}?${searchParams}`);\n    return response.data;\n  } catch (error) {\n    console.log('Error fetching movie details:', error);\n    throw error;\n  }\n};\n\nexport const fetchCast = async movieId => {\n  const path = `/movie/${movieId}/credits`;\n  try {\n    const response = await axios.get(`${path}?${searchParams}`);\n    return response.data.cast;\n  } catch (error) {\n    console.log('Error fetching cast:', error);\n    throw error;\n  }\n};\n\nexport const fetchReviews = async movieId => {\n  const path = `/movie/${movieId}/reviews`;\n  try {\n    const response = await axios.get(`${path}?${searchParams}`);\n    return response.data.results;\n  } catch (error) {\n    console.log('Error fetching reviews:', error);\n    throw error;\n  }\n};\n\n"],"names":["Container","styled","Title","MovieList","MovieItem","MovieLink","Link","MovieImage","MovieTitle","useState","movies","setMovies","useEffect","fetchMovies","fetchTrendingMovies","trendingMovies","map","movie","to","id","src","poster_path","alt","title","axios","searchParams","URLSearchParams","method","api_key","language","include_adult","headers","accept","response","data","results","console","log","searchMovies","query","fetchMovieDetails","movieId","path","fetchCast","cast","fetchReviews"],"sourceRoot":""}