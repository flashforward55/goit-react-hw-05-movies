{"version":3,"file":"static/js/947.90f78b55.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React from 'react';\n\nconst Cast = ({ cast }) => {\n  return (\n    <div>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>\n            <div>\n              {actor.profile_path && (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              )}\n              <p>Actor: {actor.name}</p>\n              <p>Character: {actor.character}</p>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\nimport Loader from '../Loader/Loader';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}`,\n          {\n            params: {\n              api_key: '6d44761072bd3455ede44a6813ca8a9a',\n            },\n          }\n        );\n        setMovieDetails(response.data);\n      } catch (error) {\n        console.log('Error fetching movie details:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n          {\n            params: {\n              api_key: '6d44761072bd3455ede44a6813ca8a9a',\n            },\n          }\n        );\n        setCast(response.data.cast);\n      } catch (error) {\n        console.log('Error fetching cast:', error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n          {\n            params: {\n              api_key: '6d44761072bd3455ede44a6813ca8a9a',\n            },\n          }\n        );\n        setReviews(response.data.results);\n      } catch (error) {\n        console.log('Error fetching reviews:', error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  if (!movieDetails) {\n    return <div>Unable to fetch movie details.</div>;\n  }\n\n  const { poster_path, title, vote_average, overview, genres, release_date } =\n    movieDetails;\n  const userScore = (vote_average * 10).toFixed(2);\n\n  const toggleCast = () => {\n    setShowCast(!showCast);\n    setShowReviews(false);\n  };\n\n  const toggleReviews = () => {\n    setShowReviews(!showReviews);\n    setShowCast(false);\n  };\n\n  const goBack = () => {\n    navigate('/');\n  };\n\n  const releaseYear = release_date ? release_date.split('-')[0] : '';\n\n  return (\n    <div>\n      <button onClick={goBack}>Go Back</button>\n      <h2>\n        {title} ({releaseYear})\n      </h2>\n      <div>\n        {poster_path && (\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            alt={title}\n          />\n        )}\n      </div>\n      <p>User Score: {userScore}%</p>\n      <p>Overview: {overview}</p>\n      <p>\n        Genres:{' '}\n        {genres.map(genre => (\n          <span key={genre.id}>{genre.name} </span>\n        ))}\n      </p>\n      <div>\n        <h2>Additional Information</h2>\n        <ul>\n          <li>\n            <button onClick={toggleCast}>Cast</button>\n          </li>\n          <li>\n            <button onClick={toggleReviews}>Reviews</button>\n          </li>\n        </ul>\n      </div>\n      {showCast && <Cast cast={cast} />}\n      {showReviews && (\n        <>\n          {reviews.length === 0 ? (\n            <p>We don't have any reviews for this movie.</p>\n          ) : (\n            <Reviews reviews={reviews} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import React from 'react';\n\nconst Reviews = ({ reviews }) => {\n  return (\n    <div>\n      <ul>\n        {reviews.map(review => (\n          <li key={review.id}>\n            <p>Author: </p>\n            <p>{review.author}</p>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["cast","map","actor","profile_path","src","alt","name","character","id","movieId","useParams","navigate","useNavigate","useState","movieDetails","setMovieDetails","setCast","reviews","setReviews","showCast","setShowCast","showReviews","setShowReviews","isLoading","setIsLoading","useEffect","fetchMovieDetails","axios","params","api_key","response","data","console","log","fetchCast","fetchReviews","results","poster_path","title","vote_average","overview","genres","release_date","userScore","toFixed","releaseYear","split","onClick","genre","length","review","author","content"],"sourceRoot":""}