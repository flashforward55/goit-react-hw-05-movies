{"version":3,"file":"static/js/565.8f39adb7.chunk.js","mappings":"4NAEaA,EAAgBC,EAAAA,GAAAA,GAAH,yGAObC,EAAYD,EAAAA,GAAAA,GAAH,uSAkBTE,EAAaF,EAAAA,GAAAA,IAAH,sGAOVG,EAAmBH,EAAAA,GAAAA,IAAH,kyBAUhBI,EAAYJ,EAAAA,GAAAA,EAAH,mEAKTK,EAAgBL,EAAAA,GAAAA,EAAH,4C,SCC1B,EAvCa,SAAC,GAAc,IAAZM,EAAW,EAAXA,KACd,OAAoB,IAAhBA,EAAKC,QACA,uBAAG,mDAGV,SAACR,EAAD,UACGO,EAAKE,KAAI,SAAAC,GAAK,OACb,SAACR,EAAD,WACE,2BACGQ,EAAMC,cACL,SAACR,EAAD,CACES,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAKH,EAAMI,QAGb,SAACV,EAAD,KAEF,UAACC,EAAD,WAAW,UAAQK,EAAMI,SACzB,UAACR,EAAD,WAAe,cACDI,EAAMK,UAAUC,MAAM,KAAK,UAZ7BN,EAAMO,GADT,KAoBpB,C","sources":["pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastContainer = styled.ul`\n  padding: 0;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nexport const ActorCard = styled.li`\n  flex: 0 0 calc(100% / 10);\n  margin-bottom: 20px;\n  padding: 10px;\n\n  @media (max-width: 1200px) {\n    width: calc(100% / 4);\n  }\n\n  @media (max-width: 800px) {\n    width: calc(100% / 3);\n  }\n\n  @media (max-width: 600px) {\n    width: calc(100% / 2);\n  }\n`;\n\nexport const ActorImage = styled.img`\n  width: 100%;\n  height: auto;\n  object-fit: cover;\n  border-radius: 5px;\n`;\n\nexport const PlaceholderImage = styled.div`\n  width: 100%;\n  height: 0;\n  padding-bottom: 150%; /* Maintain a 2:3 aspect ratio for the placeholder */\n  margin-bottom: 10px;\n  background-image: url(\"data:image/svg+xml;charset=UTF-8,%3c?xml version='1.0' encoding='UTF-8' standalone='no'?%3e%3csvg xmlns='http://www.w3.org/2000/svg' width='225' height='150' version='1.0'%3e%3cpath fill='%23d4d4d4' d='M0 0v150h225V0H0z'/%3e%3cpath fill='%23fff' d='m64.055077 38.894466 36.105543 36.105536-36.105543 36.105538 12.320373 12.32038 36.10554-36.105547 36.12454 36.124547 12.33939-12.33938-36.12454-36.124551 36.10554-36.105537-12.32039-12.320372-36.10552 36.105536L76.394463 26.55508 64.055077 38.894466z' overflow='visible' style='marker:none'/%3e%3c/svg%3e\");\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const ActorName = styled.p`\n  margin-top: 10px;\n  font-weight: bold;\n`;\n\nexport const CharacterName = styled.p`\n  margin-top: 5px;\n`;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CastContainer,\n  ActorCard,\n  ActorImage,\n  PlaceholderImage,\n  ActorName,\n  CharacterName,\n} from './Cast.styled';\n\nconst Cast = ({ cast }) => {\n  if (cast.length === 0) {\n    return <p>The actors of this movie are not represented.</p>;\n  }\n  return (\n    <CastContainer>\n      {cast.map(actor => (\n        <ActorCard key={actor.id}>\n          <div>\n            {actor.profile_path ? (\n              <ActorImage\n                src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n                alt={actor.name}\n              />\n            ) : (\n              <PlaceholderImage />\n            )}\n            <ActorName>Actor: {actor.name}</ActorName>\n            <CharacterName>\n              Character: {actor.character.split('/')[0]}\n            </CharacterName>\n          </div>\n        </ActorCard>\n      ))}\n    </CastContainer>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default Cast;\n"],"names":["CastContainer","styled","ActorCard","ActorImage","PlaceholderImage","ActorName","CharacterName","cast","length","map","actor","profile_path","src","alt","name","character","split","id"],"sourceRoot":""}