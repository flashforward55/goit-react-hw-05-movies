{"version":3,"file":"static/js/947.b5fae038.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import React from 'react';\n\nconst Cast = ({ cast }) => {\n  return (\n    <div>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>{actor.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const [movieDetails, setMovieDetails] = useState(null);\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}`,\n          {\n            params: {\n              api_key: '6d44761072bd3455ede44a6813ca8a9a',\n            },\n          }\n        );\n        setMovieDetails(response.data);\n      } catch (error) {\n        console.log('Error fetching movie details:', error);\n      }\n    };\n\n    fetchMovieDetails();\n  }, [movieId]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n          {\n            params: {\n              api_key: '6d44761072bd3455ede44a6813ca8a9a',\n            },\n          }\n        );\n        setCast(response.data.cast);\n      } catch (error) {\n        console.log('Error fetching cast:', error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        const response = await axios.get(\n          `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n          {\n            params: {\n              api_key: '6d44761072bd3455ede44a6813ca8a9a',\n            },\n          }\n        );\n        setReviews(response.data.results);\n      } catch (error) {\n        console.log('Error fetching reviews:', error);\n      }\n    };\n\n    fetchReviews();\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return <div>Loading...</div>;\n  }\n\n  const { poster_path, title, vote_average, overview, genres } = movieDetails;\n  const userScore = vote_average * 10;\n\n  const toggleCast = () => {\n    setShowCast(!showCast);\n    setShowReviews(false);\n  };\n\n  const toggleReviews = () => {\n    setShowReviews(!showReviews);\n    setShowCast(false);\n  };\n\n  const goBack = () => {\n    navigate('/');\n  };\n\n  return (\n    <div>\n      <button onClick={goBack}>Go Back</button>\n      <h2>{title}</h2>\n      <div>\n        {poster_path && (\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            alt={title}\n          />\n        )}\n      </div>\n      <p>User Score: {userScore}%</p>\n      <p>Overview: {overview}</p>\n      <p>\n        Genres:{' '}\n        {genres.map(genre => (\n          <span key={genre.id}>{genre.name} </span>\n        ))}\n      </p>\n      <div>\n        <h2>Additional Information</h2>\n        <ul>\n          <li>\n            <button onClick={toggleCast}>Cast</button>\n          </li>\n          <li>\n            <button onClick={toggleReviews}>Reviews</button>\n          </li>\n        </ul>\n      </div>\n      {showCast && <Cast cast={cast} />}\n      {showReviews && (\n        <>\n          {reviews.length === 0 ? (\n            <p>We don't have any reviews for this movie.</p>\n          ) : (\n            <Reviews reviews={reviews} />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","import React from 'react';\n\nconst Reviews = ({ reviews }) => {\n  return (\n    <div>\n      <ul>\n        {reviews.map(review => (\n          <li key={review.id}>\n            <p>{review.author}</p>\n            <p>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["cast","map","actor","name","id","movieId","useParams","navigate","useNavigate","useState","movieDetails","setMovieDetails","setCast","reviews","setReviews","showCast","setShowCast","showReviews","setShowReviews","useEffect","fetchMovieDetails","axios","params","api_key","response","data","console","log","fetchCast","fetchReviews","results","poster_path","title","vote_average","overview","genres","userScore","onClick","src","alt","genre","length","review","author","content"],"sourceRoot":""}